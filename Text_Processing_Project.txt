CSC 240 Text Processing Project 


Task Descripton 
You will write a program to read the Spam or Not Spam Dataset 
(kaggle.com/datasets/ozlerhakan/spam-or-not-spam-dataset), and then process each email 
to create features for the email. The features could be the counts of each word, the number of words, 
the counts of each bigram, stastics about the size of each word, or any other feature about the email 
that you think may be relevant and that your program will be able to compute by processing the text. 
These features are ultimately going to be a list of values where each value is associated with a named 
feature. This can be accomplished in many ways. A very simplified tabular example is the first row 
is the feature name, and rest of the rows are the values, the first column is not a feature but just an id for 
the email:
Note that some emails may not have a value for the count of a parBcular word, so the full list of 
features isn’t known unBl a`er all the emails are processed. 
Once the features are created, your program should have a way to display the features of an individual 
email. It should also have a way to display a summary of the features of a group of emails. 
You could use basic statistics such as min, max, median, mean, 
and standard deviation. You could list which words appear in all the documents and which words appear 
in different fractions of the documents.  
Since, this could be a lot of information, your program should save the email feature data and summary 
feature data to two separate csv files so that they could be read by a spreadsheet or statistics package. In 
addition, you may want to create a GUI for visualization. 
In addiBon to creating the features, there should be a method that can take one set of email features 
and another set of email features and produce a numeric distance between the two emails. Similarly, a 
set of email features should be able to have a distance from the summary data of a group of emails. 
Your program should be able to read in a model of spam and a model of not spam, then it should be able 
to read in a set of email features to determine the distance from each model, and it will classify the 
email as being spam if it is closes to the spam model or not spam if it is closest to the not spam model. 

Stage 1 Planning 
First, based on the Task Description above, create a list of requirements for your program. Next, for each 
requirement, describe specifically what the code will do for that requirement. Include UML for classes 
that will be needed. Include pseudocode and/or an algorithm description when it would clarify the 
requirement. Questions that you may want to answer (answers should be included in your plan): 
1. How do you plan to read the .csv file and process the individual cells of data? 
2. Which features do you plan to compute for each email? 
3. How do you want to represent an email in code? Use a class? Just the features? Include the 
whole raw text? Should the known class (spam/not spam) be part of the email? What if the class 
(spam/not spam) isn’t known? 
4. How do you plan to save the computed features and summaries? 
5. How do you plan to display the computed features and the summaries? 
6. What distance metric do you plan to use for distance between two emails? Euclidean distance? 
Manhattan distance? Edit distance between features? 
7. How will you compute distance from an email to the summary features? 
Once you have a plan of requirements and how to code them, make a plan of how to test that each 
requirement is met. For a first step, one test per requirement is sufficient. 
Finally, create a tentative schedule and work specificaBon for the first draft and completion of each 
requirement.   

Stage 2 Implementation 
 
To demonstrate that your program works, you will implement testing code based on your testing plan. In 
addition, your program will be given a training and a testing file generated from the spam/not spam data 
set. The training file will have the label column, but in the testing file, the label column will not have a 
meaningful value. Your program will need to read the training file to create models of spam and not 
spam, and then create predictions for each email in the testing file. These predictions should go to a file 
called predicBons.txt. There should be one predicBon per line.  
 
 
Classification Methods 
This section will describe 2 classificaBon methods that can be used once you have models. The simplest 
method is to have your model consist of the entire data set. This is called a nearest neighbor approach. 
In a nearest neighbor approach, when a new email is tested, the distance between it and each email in 
your model is computed. Then the top neighbor or the top n neighbors are kept. The majority class of 
the n neighbors is the predicted class of the email. The next simplest method is to use the summary data 
for spam and the summary data for not spam as your models. You can use the distance from the email to 
the summary data, and use the closest summary to predict the type of email. 
There are other classificaBon methods you could try, but either of these are a good first step. 

Submission 
You will have one submission area for your project plan that will be shared with your group. All planning 
documents and critiques will be put there. When you submit your plan, create a directory called with the 
word Plan followed by your name such as Plan-Cui, and then place your plan file as a .pdf file or a 
markdown file (.md) if you know markdown. When submijng critiques, they should be in the same 
directory as the plan that they are criBquing.  
You will have a submission area for your project implementation, that will be where you put your work. 
This should include your finalized plan, the program, the testing programs, and a self-assessment 
narrative write-up describing how much of your plan you completed, your prediction methods, and 
program accuracy, and which learning exemplars you completed and how they are shown in your 
project.  

